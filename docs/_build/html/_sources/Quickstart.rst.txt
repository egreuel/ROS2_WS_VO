==========
Quickstart
==========

.. _minimal-example:

Minimal example
---------------
This is a minimal example that shows how to use the collision avoidance algorithm. Here the own ship (OS)
is facing an head-on encounter with one target ship (TS).

.. literalinclude:: ../asv_path_planner/min_example.py
    :name: min-example
    :caption: min_example.py
    :linenos:

1. Import the classes VO and TS from the velobst_class.py and ts_class.py as dependencies. In this example
the .py files are in the same folder as the minimal example.

.. code-block:: python
    :name: imports
    :linenos:
    :lineno-start: 7
    
    from velobst_class import VO
    from ts_class import TS

2. Define the properties of the own ship (OS): current velocity of the OS and the desired velocity of the OS.
The velocity is always a vector consiting of speed and orientation angle.

.. code-block:: python
    :name: vo
    :linenos:
    :lineno-start: 11

    vel_OS = [3.0, 90]
    vel_des = [3.0, 90]
    os = [vel_OS, vel_des]

3. Define the properties of the target ship (TS) obtained by sensors or the automatic identification system (AIS) as an object of the TS class:
relative position of TS to OS, length and width of TS, current speed and orientation angle (velocity) of TS

.. code-block:: python
    :name: ts
    :linenos:
    :lineno-start: 17

    ts = TS()
    ts.pos = [100,0]
    ts.length = 6.0
    ts.width = 3.0
    ts.speed = 10.0
    ts.ang = 270

4. Add all objects of the TS class (all obstacles) in a list:

.. code-block:: python
    :name: all-ts
    :linenos:
    :lineno-start: 25

    all_ts = [ts]

5. Declare and object of the VO class with initial parameters for the collision avoidance algorithm. The 
initial parameters are: length and width of OS, maximum speed of OS, time to collision, time threshhold to collision,
safety factor, uncertainties in speed and orientation of TS, resolution of speed and orientation of the velocity space.

.. code-block:: python
    :name: vo-init
    :linenos:
    :lineno-start: 29

    vo = VO(3.0,1.5,5.0,120, 60, 5, 0.15, 1.5, 0.25, 3)

6. Use the calc_vel_final() function of the VO class to calculate the new velocity to avoid a collision. 

.. code-block:: python
    :name: new-vel
    :linenos:
    :lineno-start: 32

    new_vel = vo.calc_vel_final(all_ts, os, False)

.. _marus:

Evaluation of the collision avoidance algorithm with MARUSimulator
------------------------------------------------------------------

1. Build and source colcon workspace. Position yourself in root of the workspace (e.g. ``cd ~/ros_ws/src``) and run:

.. code:: bash

    $ source /opt/ros/{ROS_DISTRO}/setup.bash && colcon build
    $ source ~/ros_ws/install/setup.bash

2. Run the ROS server with:

.. code:: bash

    $ ros2 launch grpc_ros_adapter ros2_server_launch.py

3. Open the marus-example project in Unity and select the example scene from ``Assets/Scenes/Head-on_Left_Right_fast.unity``. 
Start the scene by pressing the play button. Make sure the connection to ROS is established by checking the console output of Unity.

4. Run the collision avoidance algorithm with:

.. code:: bash

    $ ros2 run asv_path_planner ros_script

5. Change the speed of the target ships by altering the code in ros_script.py. The variables storing the speed of the TS are called **self.vel_ts_1**, **self.vel_ts_2** and **self.vel_ts_3**. To change the speed change the value to the desired speed in m/s. The maximum speed is limited by the thrusters selected in the Unity scene.

6. Change the speed of the own ship by altering the code in ros_script.py. The variables storing the speed of the OS are called **self.os_des_speed** and **self.os_max_speed**:

    - **self.os_des_speed** - Speed [m/s] the OS is traveling with if no collision avoidance manouver force it to go faster or slower
    - **self.max_os_speed** - maximum possible speed [m/s] the OS is able to travel with, which prevents the algorithm to select a new velocity with higher speed than the OS is capable of

 